#!/usr/bin/env node

var db = require('../lib/db');
var SitePath = require ('sitepath');
var program = require('commander');
var pjson = require('../package.json');
var fs = require('fs');
var jsonfile = require('jsonfile');
var loaddump = require('../lib/loaddump');
var winston = require('winston');
var workflow = require('../lib/workflow'),
    runWorkflows = require('../lib/runworkflows');
var query = require ('../lib/query'),
    async = require('async');

winston.cli();

function parse_sitepath(val) {
  var pth = new SitePath(val);
  return pth;
}

var site = {};

function loadSite(next) {
  winston.info('Loading site');
  var keys = ['site', 'sitepath'];
  async.map(keys, function reqKeys(item, callback) {
    query.getSiteConfig(db, {}, 'default', item, callback);
  }, function(err, res) {
    if (err) {
      return next(err);
    }
    site.name = res[0].name;
    site.copyright = res[0].copyright;
    site.root = new SitePath(res[1].root);
    site.urlroot = res[1].urlroot;
    site.sitePathToUrl = function(sitepath, revisionId) {
      if (revisionId) {
        return sitepath.toUrl('/', 1) + '?revisionId=' + revisionId;
      } else {
        return sitepath.toUrl('/', 1);
      }
    };
    next();
  });
}

program
  .version(pjson.version)
  .option('-d, --directory [dir]','Input directory')
  .option('-f, --file [infile]','Input file','-')
  .option('-h, --nohistory','Don\'t try to Load history', true)
  .option('-p, --path [path]','Change the path to the new destination path',parse_sitepath)
  .option('-u, --user [path]','Change the user to the new destination path',parse_sitepath)
  .parse(process.argv);

var security = {context: 'ROOT'};

if (program.user) {
  security = {context: 'STANDARD'};
  security.user = program.user;
}

if (program.directory) {
  if (!fs.lstatSync(program.directory).isDirectory()) {
    winston.error('Path isn\'t a directory');
    db.gunDatabase();
    process.exit(1);
  }

  workflow.loadConf(function() {
    loadSite(function() {
      loaddump.loadFromCatalog(db, security, site, program.directory, program.path, new SitePath(['wh','users']), !program.nohistory, function(err) {
        if (err) {
          winston.error('Error:', err);
          db.gunDatabase();
          process.exit(1);
        }
        db.gunDatabase();
        process.exit(0);
      });
    });
  });

} else if (program.file === '-') {
  winston.info('Loading from stdin');
  var stdin = process.stdin;
  var inputChunks = [];

  stdin.setEncoding('utf8');

  stdin.on('readable', function() {
    var chunk = process.stdin.read();
    if (chunk !== null) {
      inputChunks.push(chunk);
    }
  });

  stdin.on('end', function() {
    var inputData = inputChunks.join();
    var parsedData = JSON.parse(inputData);
    loadSite(function() {
      loaddump.loadEntity(db, security, site, parsedData, program.path, false, !program.nohistory, {}, function(err) {
        if (err) {
          winston.error('Error:', err);
          db.gunDatabase();
          process.exit(1);
        }
        db.gunDatabase();
      });
    });
  });
} else {
  winston.info('Loading from %s', program.file);
  jsonfile.readFile(program.file, function(err, parsedData) {
    if (err) {
      winston.error('Error:', err);
      process.exit(1);
    }
    loadSite(function() {
      loaddump.loadEntity(db, security, site, parsedData, program.path, false, !program.nohistory, {}, function(err) {
        if (err) {
          winston.error('Error:', err);
          db.gunDatabase();
          process.exit(1);
        }
        db.gunDatabase();
      });
    });
  });
}
