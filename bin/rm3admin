#!/usr/bin/env node

var update = require('../lib/update');
var entity = require('../lib/entity');
var query = require('../lib/query');
var SitePath = require ('sitepath');
var db = require('../lib/db');
var program = require('commander');
var pjson = require('../package.json');
var user = require('../lib/authentication/user');
var validator = require('validator');
var crypto = require('crypto');
var loadTemplate = require('../lib/loadtemplate');
var jsonfile = require('jsonfile');
var winston = require('winston');
var workflow = require('../lib/workflow');

winston.cli();

function parse_sitepath(val) {
  var pth = new SitePath(null,null);
  pth.fromDottedPath(val);
  return pth;
}

program
  .version(pjson.version);

program
  .command('adduser [name] [fullname]')
  .description('create a user')
  .option("-p, --profile [text]", "Profile text")
  .option("--password [password]", "Password")
  .option("-u, --url [url]", "Profile URL")
  .option("-e, --email [email]", "Email")
  .option("--userroot [root]", "User Root path", parse_sitepath, new SitePath(['wh','users']))
  .action(function(name, fullname, options) {
    var now = new Date();
    if (!(name && fullname)) {
      winston.warn('Name and fullname are required');
      return;
    }
    var ent = new entity.Entity();
    user.createUser(ent, options.userroot, name, fullname, now);

    ent.summary.abstract = options.profile || '';

    if (options.url) {
      if (validator.isURL(options.url)) {
        ent.summary.profileUrl = options.url;
      } else {
        winston.warn('invalid URL');
        return;
      }
    }

    if (options.email) {
      if (validator.isEmail(options.email)) {
        ent.data.email = options.email;
      } else {
        winston.warn('invalid Email');
        return;
      }
    }

    var pw;
    if (options.password) {
      pw = options.password;
    } else {
      var buf = crypto.randomBytes(6);
      pw = buf.toString('base64');
      winston.info('Randomly generated password is:', pw);
    }

    update.createEntity(db, {}, {context: 'ROOT'}, ent, true,
                         'cli', function(err, entity_id, revision_id, revision_num) {
                           if (err) {
                             winston.error('error:', err);
                           } else {
                             user.createCredential(db, {}, options.email, options.userroot, name, pw, function(err) {
                               if (err) {
                                 winston.error('error:', err);
                               } else {
                                 winston.info('Created');
                               }
                               db.gunDatabase();
                             });
                           }
                         });
  });

program
  .command('createworkflow')
  .description('sets up the workflow')
  .action(function() {
    workflow.loadConf(function(err) {
      workflow.setupWorkflows(function(err) {
        if (err) {
          winston.error('error:', err);
          db.gunDatabase();
          workflow.gunBackend();
        } else {
          winston.info('Created workflows');
          db.gunDatabase();
          workflow.gunBackend();
        }
      });
    });
  });

program
  .command('loadtemplate [file] [path]')
  .description('loads a content template file to rm3 instance with root of path')
  .action(function(file, path, options) {
    var localPath = new SitePath(path);
    if (!(file && path)) {
      winston.warn('File and path are required');
    }
    loadTemplate(db, entity.Entity, update,
      jsonfile.readFileSync(file), localPath, localPath.down('users'), {}, function(err) {
        if (err) {
          winston.error('error:', err);
        } else {
          winston.info('Template complete');
          db.gunDatabase();
        }
      });
  });

program
  .command('assign [name] [role]')
  .description('assign a user to a role')
  .option("--userroot [root]", "User Root path", parse_sitepath, new SitePath(['wh','users']))
  .action(function(name, role, options) {
    if (!(name && role)) {
      winston.warn('Name and role are required');
      return;
    }
    update.assignUserToRole(db, {}, {context: 'ROOT'}, options.userroot.down(name), role,
                           'cli', function(err, entity_id, revision_id, revision_num) {
                             if (err) {
                               winston.error('error:', err);
                             } else {
                               winston.info('Template complete');
                               db.gunDatabase();
                             }
                           });
  });

program
  .command('userinfo [name]')
  .description('information about the user')
  .option("--userroot [root]", "User Root path", parse_sitepath, new SitePath(['wh','users']))
  .action(function(name, options) {
    if (!(name)) {
      winston.warn('Name is required');
      return;
    }
    winston.data('Permissions for user %s:', name);
    var resp = query.permissionsForUser(db, {}, options.userroot.down(name));
    resp.on('article', function(article) {
      winston.data('Role: %s\tPermission: %s\tPath %s',
        article.role, article.permission, article.path);
    });
    resp.on('error', function(err) {
      winston.error('error:', err);
    });
    resp.on('end', function() {
      winston.data('---');
      db.gunDatabase();
    });
  });

program
  .command('roleusers [role]')
  .description('information about the role')
  .action(function(role, options) {
    if (!(role)) {
      winston.warn('Role is required');
      return;
    }
    winston.data('Users in role %s:', role);
    var resp = query.listUsersInRole(db, {}, role);
    resp.on('article', function(article) {
      winston.data(article.user.toDottedPath());
    });
    resp.on('error', function(err) {
      winston.error('error:', err);
    });
    resp.on('end', function() {
      winston.data('---');
      db.gunDatabase();
    });
  });

program
  .command('roleinfo [role]')
  .description('information about the role')
  .action(function(role, options) {
    if (!(role)) {
      winston.warn('Role is required');
      return;
    }
    winston.data('Permissions for role %s:', role);
    var resp = query.listPermissionsInRole(db, {}, role);
    resp.on('article', function(article) {
      winston.data('Permission: %s\tPath %s', article.permission, article.path);
    });
    resp.on('error', function(err) {
      winston.error('error:', err);
    });
    resp.on('end', function() {
      winston.data('---');
      db.gunDatabase();
    });
  });

program
  .command('deassign [name] [role]')
  .description('removes a user from a role')
  .option("--userroot [root]", "User Root path", parse_sitepath, new SitePath(['wh','users']))
  .action(function(name, role, options) {
    if (!(name && role)) {
      winston.warn('Name and role are required');
      return;
    }
    update.removeUserFromRole(db, {}, {context: 'ROOT'}, options.userroot.down(name), role,
                           'cli', function(err, entity_id, revision_id, revision_num) {
                             if (err) {
                               winston.error('error:', err);
                             } else {
                               winston.info('Deleted');
                               db.gunDatabase();
                             }
                           });
  });

program
  .command('permit [role] [permission] [path]')
  .description('add a permission to a role')
  .action(function(role, permission, path, options) {
    if (!(permission && role && path)) {
      winston.warn('role, permission, and path are required');
      return;
    }
    update.addPermissionToRole(db, {}, {context: 'ROOT'}, role, permission, path,
                           'cli', function(err, entity_id, revision_id, revision_num) {
                             if (err) {
                               winston.error('error:', err);
                             } else {
                               winston.info('Created');
                               db.gunDatabase();
                             }
                           });
  });

program
  .command('deny [role] [permission] [path]')
  .description('remove a permission from a role')
  .action(function(role, permission, path, options) {
    if (!(permission && role && path)) {
      winston.warn('role, permission, and path are required');
      return;
    }
    update.removePermissionFromRole(db, {}, {context: 'ROOT'}, role, permission, path,
                           'cli', function(err, entity_id, revision_id, revision_num) {
                             if (err) {
                               winston.error('error:', err);
                             } else {
                               winston.info('Deleted');
                               db.gunDatabase();
                             }
                           });
  });

program
  .command('listcredentials')
  .description('List credentials')
  .action(function(options) {
    winston.data('Credentials');
    var resp = query.listCredentials(db, {});
    resp.on('article', function(article) {
      winston.data('Provider: %s\tUser ID: %s\tUser Path:%s\t',
        article.provider, article.userId, article.userPath);
      winston.data('Provider Details: %s', article.providerDetails);
    });
    resp.on('error', function(err) {
      winston.error('error:', err);
    });
    resp.on('end', function() {
      winston.data('---');
      db.gunDatabase();
    });
  });

program
  .command('addclient [clientId] [clientSecret] [name] [redirectUri]')
  .description('add a Oauth2 / OpenID Client')
  .action(function(clientId, clientSecret, name, redirectUri, options) {
    if (!(clientId && clientSecret)) {
      winston.warn('clientId and clientSecret are required');
      return;
    }
    update.createServiceAccount(db, {}, 'openid', clientId, 
      {secret: clientSecret, redirectUri: redirectUri, name: name}, function(err, entity_id, revision_id, revision_num) {
         if (err) {
           winston.error('error:', err);
         } else {
           winston.info('Service Account created');
           db.gunDatabase();
         }
       });
  });

program.parse(process.argv);
