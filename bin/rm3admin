#!/usr/bin/env node

var update = require('../lib/update');
var entity = require('../lib/entity');
var sitepath = require ('../lib/sitepath');
var db = require('../lib/db');
var program = require('commander');
var pjson = require('../package.json');
var user = require('../lib/user');
var validator = require('validator');
var crypto = require('crypto');

function parse_sitepath(val) {
  var pth = new sitepath(null,null);
  pth.fromDottedPath(val);
  return pth;
}

program
  .version(pjson.version);

program
  .command('adduser [name] [fullname]')
  .description('create a user')
  .option("-p, --profile [text]", "Profile text")
  .option("--password [password]", "Password")
  .option("-u, --url [url]", "Profile URL")
  .option("-e, --email [email]", "Email")
  .option("--userroot [root]", "User Root path", parse_sitepath, new sitepath(['wh','users']))
  .action(function(name, fullname, options){
    var now = new Date();
    if (!(name && fullname)) {
      console.log('Name and fullname are required')
      return;
    }
    var ent = new entity.Entity();
    user.createUser(ent, options.userroot, name, fullname, now);

    ent.summary.abstract = options.profile || '';

    if (options.url) {
      if (validator.isURL(options.url)) {
        ent.summary.profile_url = options.url;
      } else {
        console.log('invalid URL')
        return;
      }
    }

    if (options.email) {
      if (validator.isEmail(options.email)) {
        ent.data.email = options.email;
      } else {
        console.log('invalid Email')
        return;
      }
    }

    var pw;
    if (options.password) {
      pw = options.password;
    } else {
      var buf = crypto.randomBytes(6);
      pw = buf.toString('base64');
      console.log('Randomly generated password is:', pw)
    }
    user.encodePassword(pw, ent, function(err) {
      if (err) {
        console.log('error:')
        console.log(err);
        return;
      }
      
      update.create_entity(db, ent, true, 
                           'cli', function(err, entity_id, revision_id, revision_num) {
        if (err) {
          console.log('error:');
          console.log(err);
        } else {
          console.log('Created');
          db.gun_database();
        }
      });
    });

  });

program
  .command('assign [name] [role]')
  .description('assign a user to a role')
  .option("--userroot [root]", "User Root path", parse_sitepath, new sitepath(['wh','users']))
  .action(function(name, role, options){
    if (!(name && role)) {
      console.log('Name and role are required')
      return;
    }
    update.assign_user_to_role(db, options.userroot.down(name), role,
                           'cli', function(err, entity_id, revision_id, revision_num) {
      if (err) {
        console.log('error:');
        console.log(err);
      } else {
        console.log('Created');
        db.gun_database();
      }
    });
  });


program
  .command('permit [role] [permission] [path]')
  .description('add a permission to a role')
  .action(function(role, permission, path, options){
//exports.add_permission_to_role = function(db, role, permission, path, note, next) {
    if (!(permission && role && path)) {
      console.log('role, permission, and path are required')
      return;
    }
    path = parse_sitepath(path);
    update.add_permission_to_role(db, role, permission, path,
                           'cli', function(err, entity_id, revision_id, revision_num) {
      if (err) {
        console.log('error:');
        console.log(err);
      } else {
        console.log('Created');
        db.gun_database();
      }
    });
  });

program.parse(process.argv);