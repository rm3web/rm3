#!/usr/bin/env node

var query = require('../lib/query');
var entity = require('../lib/entity');
var sitepath = require ('sitepath');
var db = require('../lib/db');
var program = require('commander');
var pjson = require('../package.json');
var async = require('async');
var util = require('util');
var dumpEntity = require('../lib/dumpentity.js');

function parse_sitepath(val) {
  var pth = new sitepath(val);
  return pth;
}

program
  .version(pjson.version)
  .arguments('[path]')
  .option('-l, --log','Get history', false)
  .option('-f, --friendly','Human-readable friendly format')
  .parse(process.argv)
  ;

var path = new sitepath('wh');
if(program.args[0]) {
  var path = new sitepath(program.args[0]);
}

dumpEntity(db, entity.Entity, path, program.log, function(err, ent, log, blobs) {

  if (!err) {
    if (program.friendly) {
      console.log('Path: %s', ent._path.toDottedPath());
      console.log('Entity ID: %s', ent._entity_id);
      console.log('Entity Revision ID / Num: %s\t%s', ent._revision_id, ent._revision_num);
      console.log('Proto: %s', ent._proto);
      console.log('Created: %s', ent._created);
      console.log('Modified: %s', ent._modified);
      console.log('Summary:');
      console.log(util.inspect(ent.summary, {depth: null}));
      console.log('\nData:');
      console.log(util.inspect(ent.data, {depth: null}));
      console.log();
      if (log) {
        console.log('History:');
        log.forEach(function(entry, index, array) {
          console.log('Revision #%s %s / %s:', index, entry.revision_id, entry.revision_num);
          console.log('Event Class: %s', entry.evt_class);
          console.log('Note: %s', entry.note);
          console.log('Base Revision ID: %s', entry.base_revision_id);
          console.log('Replace Revision ID: %s', entry.replace_revision_id);
          console.log('Event Started: %s', entry.evt_start);
          console.log('Event Ended: %s', entry.evt_end);
          console.log('Event Touched: %s', entry.evt_touched);
          if (entry.evt_final) {
            console.log('Finalized event');
          }
          console.log('Data:');
          console.log(util.inspect(entry.data, {depth: null}));
          console.log();
        });
      }
    } else {
      var rec = ent.toRec();
      rec.history = log;
      rec.dump_date = new Date();
      rec.dump_version = pjson.version;
      console.log(JSON.stringify(rec));
    }
  }
  db.gunDatabase();
});
